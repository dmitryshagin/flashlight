
button_control.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000008c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  0000008c  00000100  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006b4  00000000  00000000  00000100  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000097  00000000  00000000  000007b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      0000002f  00000000  00000000  0000084b  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  0000087a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000000c4  00000000  00000000  000008a2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000085  00000000  00000000  00000966  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000108  00000000  00000000  000009eb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000048  00000000  00000000  00000af4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000000d2  00000000  00000000  00000b3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000005d  00000000  00000000  00000c0e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00000c6b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	09 c0       	rjmp	.+18     	; 0x14 <__ctors_end>
   2:	0f c0       	rjmp	.+30     	; 0x22 <__vector_1>
   4:	0d c0       	rjmp	.+26     	; 0x20 <__bad_interrupt>
   6:	0c c0       	rjmp	.+24     	; 0x20 <__bad_interrupt>
   8:	0b c0       	rjmp	.+22     	; 0x20 <__bad_interrupt>
   a:	0a c0       	rjmp	.+20     	; 0x20 <__bad_interrupt>
   c:	09 c0       	rjmp	.+18     	; 0x20 <__bad_interrupt>
   e:	08 c0       	rjmp	.+16     	; 0x20 <__bad_interrupt>
  10:	07 c0       	rjmp	.+14     	; 0x20 <__bad_interrupt>
  12:	06 c0       	rjmp	.+12     	; 0x20 <__bad_interrupt>

00000014 <__ctors_end>:
  14:	11 24       	eor	r1, r1
  16:	1f be       	out	0x3f, r1	; 63
  18:	cf e9       	ldi	r28, 0x9F	; 159
  1a:	cd bf       	out	0x3d, r28	; 61
  1c:	20 d0       	rcall	.+64     	; 0x5e <main>
  1e:	34 c0       	rjmp	.+104    	; 0x88 <_exit>

00000020 <__bad_interrupt>:
  20:	ef cf       	rjmp	.-34     	; 0x0 <__vectors>

00000022 <__vector_1>:
#include <avr/io.h>
#include <avr/interrupt.h>
#include <avr/sleep.h> 

ISR(INT0_vect){
  22:	1f 92       	push	r1
  24:	0f 92       	push	r0
  26:	0f b6       	in	r0, 0x3f	; 63
  28:	0f 92       	push	r0
  2a:	11 24       	eor	r1, r1
  2c:	8f 93       	push	r24
  2e:	9f 93       	push	r25
	cli();
  30:	f8 94       	cli
	GIMSK=0;
  32:	1b be       	out	0x3b, r1	; 59
	PORTB^=_BV(PORTB4);
  34:	98 b3       	in	r25, 0x18	; 24
  36:	80 e1       	ldi	r24, 0x10	; 16
  38:	89 27       	eor	r24, r25
  3a:	88 bb       	out	0x18, r24	; 24
  3c:	80 e7       	ldi	r24, 0x70	; 112
  3e:	97 e1       	ldi	r25, 0x17	; 23
	for(uint16_t i=0;i<6000;i++){
		asm volatile("nop");
  40:	00 00       	nop
  42:	01 97       	sbiw	r24, 0x01	; 1

ISR(INT0_vect){
	cli();
	GIMSK=0;
	PORTB^=_BV(PORTB4);
	for(uint16_t i=0;i<6000;i++){
  44:	e9 f7       	brne	.-6      	; 0x40 <__SREG__+0x1>
		asm volatile("nop");
	}
	while(!(PINB & (1<<PINB1))){}
  46:	b1 9b       	sbis	0x16, 1	; 22
  48:	fe cf       	rjmp	.-4      	; 0x46 <__SREG__+0x7>
	GIMSK=(1<<INT0);
  4a:	80 e4       	ldi	r24, 0x40	; 64
  4c:	8b bf       	out	0x3b, r24	; 59
	sei();
  4e:	78 94       	sei
}
  50:	9f 91       	pop	r25
  52:	8f 91       	pop	r24
  54:	0f 90       	pop	r0
  56:	0f be       	out	0x3f, r0	; 63
  58:	0f 90       	pop	r0
  5a:	1f 90       	pop	r1
  5c:	18 95       	reti

0000005e <main>:

int main(void){
	DDRB=(0<<DDB5) | (1<<DDB4) | (0<<DDB3) | (0<<DDB2) | (0<<DDB1) | (0<<DDB0);
  5e:	80 e1       	ldi	r24, 0x10	; 16
  60:	87 bb       	out	0x17, r24	; 23
	PORTB=(1<<PORTB5) | (0<<PORTB4) | (1<<PORTB3) | (1<<PORTB2) | (1<<PORTB1) | (1<<PORTB0);
  62:	8f e2       	ldi	r24, 0x2F	; 47
  64:	88 bb       	out	0x18, r24	; 24
	GIMSK=(1<<INT0);
  66:	80 e4       	ldi	r24, 0x40	; 64
  68:	8b bf       	out	0x3b, r24	; 59
	MCUCR=0;
  6a:	15 be       	out	0x35, r1	; 53
	GIFR=(1<<INTF0);
  6c:	8a bf       	out	0x3a, r24	; 58
	set_sleep_mode(SLEEP_MODE_PWR_DOWN);
  6e:	85 b7       	in	r24, 0x35	; 53
  70:	87 7e       	andi	r24, 0xE7	; 231
  72:	80 61       	ori	r24, 0x10	; 16
  74:	85 bf       	out	0x35, r24	; 53
	sei();
  76:	78 94       	sei
	while(1){
		sleep_mode();
  78:	85 b7       	in	r24, 0x35	; 53
  7a:	80 62       	ori	r24, 0x20	; 32
  7c:	85 bf       	out	0x35, r24	; 53
  7e:	88 95       	sleep
  80:	85 b7       	in	r24, 0x35	; 53
  82:	8f 7d       	andi	r24, 0xDF	; 223
  84:	85 bf       	out	0x35, r24	; 53
  86:	f8 cf       	rjmp	.-16     	; 0x78 <main+0x1a>

00000088 <_exit>:
  88:	f8 94       	cli

0000008a <__stop_program>:
  8a:	ff cf       	rjmp	.-2      	; 0x8a <__stop_program>
